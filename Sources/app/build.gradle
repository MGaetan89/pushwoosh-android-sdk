buildscript {
    repositories {
        mavenCentral()
        google()
        maven {url 'https://developer.huawei.com/repo/'}
    }

    dependencies {
        classpath 'com.google.gms:google-services:4.3.15' // google-services plugin
        classpath 'com.huawei.agconnect:agcp:1.6.2.300' // huawei plugin
    }
}

apply plugin: 'com.android.application'
apply from: '../scripts/buildSdk/build.gradle'
apply from: '../scripts/prepareAar/build.gradle'
apply plugin: 'com.huawei.agconnect'

android {
    compileSdkVersion global_compileSdkVersion
    namespace "com.pushwoosh.testingapp"
    testNamespace "com.pushwoosh.testingapp.test"

    defaultConfig {
//        applicationId "com.pushwoosh.sdk" for Amazon
        applicationId "com.pushwoosh.testingapp"
        minSdkVersion global_minSdkVersion
        targetSdkVersion global_targetVersion

        versionCode 2
        versionName "1.0"

        manifestPlaceholders = [pw_appid          : "11C10-EF18D",
                                gcm_project_number: "A245850018966",
                                pw_url            : "https://cp.pushwoosh.com/json/1.3/"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
    signingConfigs {
        debug {
            storeFile "${project.rootDir}/config/keys/debug.keystore" as File
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

//    sourceSets {
//        main {
//            jniLibs.srcDirs = ['jniLibs']
//        }
//    }
}

task buildPushwoosh(type: GradleBuild) {
    buildFile 'build.gradle'
    buildName = "buildPushwooshTask"
}

task copyAarsToOutputDir(type: GradleBuild) {
    buildFile 'build.gradle'
    buildName = "copyAarsToOutputDir"
}

android.applicationVariants.all { variant ->
    if (variant.name == "release") {
        def modulesList = [ "pushwoosh", "pushwoosh-badge", "pushwoosh-location", "pushwoosh-experimental",
                            "pushwoosh-firebase", "pushwoosh-inbox", "pushwoosh-inbox-ui", "pushwoosh-huawei", "pushwoosh-xiaomi" ]

        ArrayList<String> dependeciesList = new ArrayList<>();
        ArrayList<String> aarsTaskList = new ArrayList<>();
        for (String projectName in modulesList) {
            dependeciesList.add(String.format(":%s:assembleRelease", projectName))
            aarsTaskList.add(String.format(":%s:copyToGlobal", projectName))
            dependencies {
                releaseImplementation fileTree(include: [ "*.aar" ], dir: "../${projectName}/build/outputs/aar" )
            }
        }

        GradleBuild buildPushwoosh = tasks.getByName("buildPushwoosh")
        buildPushwoosh.setTasks(dependeciesList)
        GradleBuild copyAars = tasks.getByName("copyAarsToOutputDir")
        copyAars.setTasks(aarsTaskList)
        variant.preBuildProvider.get().dependsOn(buildPushwoosh)
        variant.getAssembleProvider().get().finalizedBy(copyAars)
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    debugApi project(':pushwoosh')
    debugApi project(':pushwoosh-badge')
    debugApi project(':pushwoosh-location')
    debugApi project(':pushwoosh-experimental')
//    debugApi project(':pushwoosh-baidu')
    debugApi project(':pushwoosh-amazon')
    debugApi project(':pushwoosh-firebase')
    debugApi project(':pushwoosh-huawei')
    debugApi project(':pushwoosh-xiaomi')
    debugApi project(':pushwoosh-inbox')
    debugApi project(':pushwoosh-inbox-ui')


    implementation "androidx.work:work-runtime:${workManager}"
    implementation "com.google.firebase:firebase-messaging:${firebase}"
    implementation "com.huawei.hms:push:${huawei}"
    implementation "androidx.appcompat:appcompat:${support}"
    implementation "androidx.databinding:viewbinding:4.1.3"
    implementation "androidx.legacy:legacy-support-v4:${legacy_support_v4}"
    implementation "com.google.android.material:material:${material}"
    implementation "androidx.constraintlayout:constraintlayout:${constraint}"
    implementation "androidx.recyclerview:recyclerview:${support}"
    implementation "com.github.bumptech.glide:glide:${glide}"
    implementation "com.google.android.gms:play-services-base:${googlePlayService}"
    implementation "com.google.android.gms:play-services-location:${googleLocationServices}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])

    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'

    implementation 'com.squareup:otto:1.3.8'

    androidTestImplementation 'androidx.annotation:annotation:1.0.0'
    androidTestImplementation 'junit:junit:4.12'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test:rules:1.1.5'
    androidTestImplementation 'androidx.room:room-testing:2.0.0'

    androidTestImplementation 'androidx.test.espresso:espresso-web:3.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test:rules:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    androidTestImplementation 'org.mockito:mockito-core:1.10.19'
}

apply plugin: 'com.google.gms.google-services'